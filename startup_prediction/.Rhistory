companies_founded_per_year = objects_filtered %>%
group_by(Year) %>%
summarise(Total = n())
founded_acquisition_rate = merge(acquisitions_per_year,
companies_founded_per_year, by = 'Year') %>%
mutate(acquired_rate = round((Acquired/Total)*100))
p <- ggplot(head(founded_acquisition_rate, 34), aes(x=Year, y=Total, group = 1)) +
geom_point() + geom_line()+ scale_x_discrete(guide = guide_axis(n.dodge=3)) +
geom_text(aes(label=Total), position=position_dodge(width=0.9), vjust=-0.25) +
labs(title = "Companies Founded over the Years", x = "Founding Year", y = "Total No. of Companies")
q <- ggplot(head(founded_acquisition_rate, 34), aes(x=Year, y=acquired_rate, group = 1)) +
geom_point() + geom_line()+ scale_x_discrete(guide = guide_axis(n.dodge=3)) +
geom_text(aes(label=acquired_rate), position=position_dodge(width=0.9), vjust=-0.25) +
labs(title = "Success Rate over the Years", x = "Founding Year", y = "Success Rate")
par(mfrow=c(2,1))
plot(p)
plot(q)
funding_rounds_acquired_status = objects_filtered %>%
group_by(gr=cut(funding_rounds,breaks= c(1,2,3,4,5,6,7,8,9,10,11,12,13)
, right=FALSE),status) %>%
summarise(n= n()) %>%
arrange(as.numeric(gr)) %>%
filter(status == 1) %>%
arrange(desc(n))
funding_rounds_total_status = objects_filtered %>%
group_by(gr=cut(funding_rounds,breaks=  c(1,2,3,4,5,6,7,8,9,10,11,12,13)
, right=FALSE)) %>%
summarise(Total= n()) %>%
arrange(as.numeric(gr))
funding_rounds_acquired_rate = merge(funding_rounds_total_status, funding_rounds_acquired_status, by='gr')
funding_rounds_acquired_rate = funding_rounds_acquired_rate %>%
mutate(acquired_rate = round((n/Total)*100))
p<-ggplot(data=head(funding_rounds_acquired_rate, 12), aes(x=gr, y=acquired_rate, fill=gr)) +
geom_bar(stat="identity", position='dodge') +
labs(title = "Success Rate vs Funding rounds", x = "Funding Rounds", y = "Success Rate") +
scale_x_discrete(guide = guide_axis(n.dodge=3)) +
geom_text(aes(label=acquired_rate), position=position_dodge(width=0.9), vjust=-0.25) +
guides(fill="none") +
theme_minimal()
p
objects_filtered = objects_filtered %>%
mutate(Closed_Year = format(as.Date(objects_filtered$closed_at, "%Y-%m-%d"),
"%Y"))
closed_year = objects_filtered %>%
filter(Closed_Year >= '1980') %>%
group_by(Closed_Year) %>% count()
nrow(closed_year)
ggplot(head(closed_year, 16), aes(x=Closed_Year, y=n, group = 1)) +
geom_point() + geom_line()+ scale_x_discrete(guide = guide_axis(n.dodge=3)) +
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust=-0.25) +
labs(title = "No. of Companies closed over the years", x = "Closing Year",
y = "No. of Companies")
acquisitions = acquisitions %>% mutate(Acquired_Year = format(as.Date(acquisitions$acquired_at, "%Y-%m-%d"), "%Y"))
ipos = ipos %>% mutate(IPO_Year = format(as.Date(ipos$public_at, "%Y-%m-%d"), "%Y"))
acquisitions_grouped = acquisitions %>% group_by(Acquired_Year) %>% count()
ipos_grouped = ipos %>% group_by(IPO_Year) %>% count()
acquisition_ipo_joined = left_join(acquisitions_grouped, ipos_grouped, by=c("Acquired_Year"="IPO_Year"))
acquisition_ipo_joined$Count = rowSums(acquisition_ipo_joined[,c("n.x", "n.y")], na.rm=TRUE)
ggplot(head(acquisition_ipo_joined, 33), aes(x=Acquired_Year, y=Count, group = 1)) +
geom_point() + geom_line()+ scale_x_discrete(guide = guide_axis(n.dodge=3)) +
geom_text(aes(label=Count), position=position_dodge(width=0.9), vjust=-0.25) +
labs(title = "No. of Companies acquired/ipo over the years", x = "Acquired/IPO Year", y = "No. of Companies")
knitr::opts_chunk$set(echo = TRUE)
packages = c("dplyr", "ggplot2",
"tidyverse", "mltools",
"data.table", "caret", "party",
"rpart", "rpart.plot", "e1071",
"caTools", "class", "randomForest",
"pROC", "plotROC")
## Now load or install & load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
knitr::opts_chunk$set(echo = TRUE)
packages = c("dplyr", "ggplot2",
"tidyverse", "mltools",
"data.table", "caret", "party",
"rpart", "rpart.plot", "e1071",
"caTools", "class", "randomForest",
"pROC", "plotROC")
## Now load or install & load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
objects = read.csv('datasets/objects.csv')
degrees = read.csv('datasets/degrees.csv')
relationships = read.csv('datasets/relationships.csv')
acquisitions = read.csv('datasets/acquisitions.csv')
ipos = read.csv('datasets/ipos.csv')
objects_filtered = objects %>%
filter(as.Date(founded_at) >= "1980-01-01")
objects_filtered =  objects_filtered %>%
filter(status %in% c("ipo", "acquired", "closed"))
objects_filtered$status[which(objects_filtered$status == "ipo")] = "acquired"
objects_filtered = objects_filtered %>%
filter(entity_type == 'Company')
objects_filtered = objects_filtered %>%
filter(category_code != "")
objects_filtered = objects_filtered %>%
filter(country_code != "")
objects_filtered$twitter_username[objects_filtered$twitter_username!=""] = 1
objects_filtered$twitter_username[objects_filtered$twitter_username==""] = 0
objects_filtered$twitter_username = as.numeric(objects_filtered$twitter_username)
objects_filtered$twitter_presence = objects_filtered$twitter_username
objects_filtered$twitter_username = NULL
objects_filtered$category_code = as.factor(objects_filtered$category_code)
objects_filtered$country_code = as.factor(objects_filtered$country_code)
objects_filtered$status = ifelse(objects_filtered$status == "acquired", 1,0)
anyDuplicated(objects_filtered$id)
unique_companies = objects_filtered$id
relationships_filtered = relationships %>%
filter(relationship_object_id %in% unique_companies)
degrees_filtered = degrees %>%
filter(object_id %in% relationships$person_object_id)
rel_degree_merged = left_join(relationships_filtered, degrees_filtered,
by = c("person_object_id" = "object_id"))
no_of_founders = rel_degree_merged %>%
filter(grepl('founder', title, ignore.case = TRUE)) %>%
group_by(relationship_object_id) %>%
summarize(No_Of_Founders = length(unique(person_object_id)))
no_of_mbas = rel_degree_merged %>%
filter(degree_type == 'MBA') %>%
group_by(relationship_object_id) %>%
summarise(No_Of_MBAs = length(unique(person_object_id)))
no_of_ms = rel_degree_merged %>%
filter(degree_type == 'MS') %>%
group_by(relationship_object_id) %>%
summarise(No_Of_MSs = length(unique(person_object_id)))
no_of_phds = rel_degree_merged %>%
filter(degree_type == 'PhD') %>%
group_by(relationship_object_id) %>%
summarise(No_Of_PHDs = length(unique(person_object_id)))
objects_filtered = left_join(objects_filtered, no_of_founders,
by = c("id" = "relationship_object_id"))
objects_filtered = left_join(objects_filtered, no_of_mbas,
by = c("id" = "relationship_object_id"))
objects_filtered = left_join(objects_filtered, no_of_ms,
by = c("id" = "relationship_object_id"))
objects_filtered = left_join(objects_filtered, no_of_phds,
by = c("id" = "relationship_object_id"))
objects_filtered$No_Of_Founders[is.na(objects_filtered$No_Of_Founders)] = 1
objects_filtered$No_Of_MBAs[is.na(objects_filtered$No_Of_MBAs)] = 0
objects_filtered$No_Of_MSs[is.na(objects_filtered$No_Of_MSs)] = 0
objects_filtered$No_Of_PHDs[is.na(objects_filtered$No_Of_PHDs)] = 0
top_5_countries = objects_filtered %>%
group_by(country_code) %>%
count() %>%
arrange(desc(n)) %>%
head(5) %>%
dplyr::select(country_code)
top_5_countries$is_top_5_country = 1
objects_filtered = left_join(objects_filtered, top_5_countries,
by = c("country_code" = "country_code"))
objects_filtered$is_top_5_country[is.na(objects_filtered$is_top_5_country)] = 0
objects_filtered = objects_filtered %>% filter(funding_rounds > 0)
objects_filtered_final = objects_filtered %>% dplyr::select(category_code,
is_top_5_country,
milestones, relationships,
funding_rounds,
funding_total_usd,
twitter_presence,
No_Of_Founders, No_Of_MBAs,
No_Of_MSs, No_Of_PHDs,
status)
no_of_companies_vs_category = objects_filtered %>%
filter(category_code != "") %>%
group_by(category_code) %>%
summarise(Total = n()) %>%
arrange(desc(Total))
p<-ggplot(data=head(no_of_companies_vs_category, 20), aes(x=reorder(category_code, -Total), y=Total, fill=category_code)) +
geom_bar(stat="identity", position='dodge') +
labs(title = "Number of Companies in Each Category (Top 20 shown)", x = "", y = "Number of Companies") + scale_x_discrete(guide = guide_axis(n.dodge=3)) +
geom_text(aes(label=Total), position=position_dodge(width=0.9), vjust=-0.25) +
guides(fill="none") +
theme_minimal()
p
no_of_companies_acquired_vs_category = objects_filtered %>%
filter(category_code != "") %>%
group_by(category_code, status) %>%
summarise(acquired = sum(status == 1), closed = sum(status == 0)) %>%
group_by(category_code) %>%
filter(status == 1) %>%
dplyr::select(acquired) %>%
arrange(desc(acquired))
p<-ggplot(data=head(no_of_companies_acquired_vs_category, 20),
aes(x=reorder(category_code, -acquired), y=acquired,
fill=category_code)) +
geom_bar(stat="identity", position='dodge') +
labs(title = "Number of Companies Acquired in Each Category (Top 10 Shown)",
x = "Category", y = "Number of Companies Acquired") +
scale_x_discrete(guide = guide_axis(n.dodge=3)) +
geom_text(aes(label=acquired), position=position_dodge(width=0.9),
vjust=-0.25) + guides(fill="none") + theme_minimal()
p
acquisition_rate_vs_category = merge(no_of_companies_vs_category,
no_of_companies_acquired_vs_category,
by='category_code')
acquisition_rate_vs_category = acquisition_rate_vs_category %>%
mutate(acquired_rate = round((acquired/Total)*100)) %>%
filter(acquired >= 40) %>%
arrange(desc(acquired_rate))
p<-ggplot(data=head(acquisition_rate_vs_category, 20),
aes(x=reorder(category_code, -acquired_rate),
y=acquired_rate, fill=category_code)) +
geom_bar(stat="identity", position='dodge') +
labs(title = "Success Rate per Category (Top 20 Shown)", x = "",
y = "Success Rate") +
scale_x_discrete(guide = guide_axis(n.dodge=3)) +
geom_text(aes(label=acquired_rate), position=position_dodge(width=0.9),
vjust=-0.25) +
guides(fill="none") +
theme_minimal()
p
relationships_acquired_status = objects_filtered %>%
group_by(gr=cut(relationships,breaks= c(0,2,4,6,8,10,20,30,40,50,100,Inf)
, right=FALSE),status) %>%
summarise(n= n()) %>%
arrange(as.numeric(gr)) %>%
filter(status == 1) %>%
arrange(desc(n))
relationships_total_status = objects_filtered %>%
group_by(gr=cut(relationships,breaks= c(0,2,4,6,8,10,20,30,40,50,100, Inf)
, right=FALSE)) %>%
summarise(Total= n()) %>%
arrange(as.numeric(gr))
relationships_acquired_rate = merge(relationships_total_status,
relationships_acquired_status, by='gr')
relationships_acquired_rate = relationships_acquired_rate %>%
mutate(acquired_rate = round((n/Total)*100))
p<-ggplot(data=head(relationships_acquired_rate, 10), aes(x=gr, y=acquired_rate,
fill=gr)) +
geom_bar(stat="identity", position='dodge') +
labs(title = "Success Rate vs Number of Relationships", x = "Relationships",
y = "Success Rate") +
scale_x_discrete(guide = guide_axis(n.dodge=3)) +
geom_text(aes(label=acquired_rate), position=position_dodge(width=0.9),
vjust=-0.25) +
guides(fill="none") +
theme_minimal()
p
objects_filtered = objects_filtered %>%
mutate(Year = format(as.Date(objects_filtered$founded_at, "%Y-%m-%d"), "%Y"))
acquisitions_per_year = objects_filtered %>%
group_by(Year, status) %>% summarise(Acquired = sum(status == 1)) %>%
filter(status == 1) %>% arrange(Year)
companies_founded_per_year = objects_filtered %>%
group_by(Year) %>%
summarise(Total = n())
founded_acquisition_rate = merge(acquisitions_per_year,
companies_founded_per_year, by = 'Year') %>%
mutate(acquired_rate = round((Acquired/Total)*100))
p <- ggplot(head(founded_acquisition_rate, 34), aes(x=Year, y=Total, group = 1)) +
geom_point() + geom_line()+ scale_x_discrete(guide = guide_axis(n.dodge=3)) +
geom_text(aes(label=Total), position=position_dodge(width=0.9), vjust=-0.25) +
labs(title = "Companies Founded over the Years", x = "Founding Year", y = "Total No. of Companies")
q <- ggplot(head(founded_acquisition_rate, 34), aes(x=Year, y=acquired_rate, group = 1)) +
geom_point() + geom_line()+ scale_x_discrete(guide = guide_axis(n.dodge=3)) +
geom_text(aes(label=acquired_rate), position=position_dodge(width=0.9), vjust=-0.25) +
labs(title = "Success Rate over the Years", x = "Founding Year", y = "Success Rate")
par(mfrow=c(2,1))
plot(p)
plot(q)
funding_rounds_acquired_status = objects_filtered %>%
group_by(gr=cut(funding_rounds,breaks= c(1,2,3,4,5,6,7,8,9,10,11,12,13)
, right=FALSE),status) %>%
summarise(n= n()) %>%
arrange(as.numeric(gr)) %>%
filter(status == 1) %>%
arrange(desc(n))
funding_rounds_total_status = objects_filtered %>%
group_by(gr=cut(funding_rounds,breaks=  c(1,2,3,4,5,6,7,8,9,10,11,12,13)
, right=FALSE)) %>%
summarise(Total= n()) %>%
arrange(as.numeric(gr))
funding_rounds_acquired_rate = merge(funding_rounds_total_status, funding_rounds_acquired_status, by='gr')
funding_rounds_acquired_rate = funding_rounds_acquired_rate %>%
mutate(acquired_rate = round((n/Total)*100))
p<-ggplot(data=head(funding_rounds_acquired_rate, 12), aes(x=gr, y=acquired_rate, fill=gr)) +
geom_bar(stat="identity", position='dodge') +
labs(title = "Success Rate vs Funding rounds", x = "Funding Rounds", y = "Success Rate") +
scale_x_discrete(guide = guide_axis(n.dodge=3)) +
geom_text(aes(label=acquired_rate), position=position_dodge(width=0.9), vjust=-0.25) +
guides(fill="none") +
theme_minimal()
p
objects_filtered = objects_filtered %>%
mutate(Closed_Year = format(as.Date(objects_filtered$closed_at, "%Y-%m-%d"),
"%Y"))
closed_year = objects_filtered %>%
filter(Closed_Year >= '1980') %>%
group_by(Closed_Year) %>% count()
nrow(closed_year)
ggplot(head(closed_year, 16), aes(x=Closed_Year, y=n, group = 1)) +
geom_point() + geom_line()+ scale_x_discrete(guide = guide_axis(n.dodge=3)) +
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust=-0.25) +
labs(title = "No. of Companies closed over the years", x = "Closing Year",
y = "No. of Companies")
acquisitions = acquisitions %>% mutate(Acquired_Year = format(as.Date(acquisitions$acquired_at, "%Y-%m-%d"), "%Y"))
ipos = ipos %>% mutate(IPO_Year = format(as.Date(ipos$public_at, "%Y-%m-%d"), "%Y"))
acquisitions_grouped = acquisitions %>% group_by(Acquired_Year) %>% count()
ipos_grouped = ipos %>% group_by(IPO_Year) %>% count()
acquisition_ipo_joined = left_join(acquisitions_grouped, ipos_grouped, by=c("Acquired_Year"="IPO_Year"))
acquisition_ipo_joined$Count = rowSums(acquisition_ipo_joined[,c("n.x", "n.y")], na.rm=TRUE)
ggplot(head(acquisition_ipo_joined, 33), aes(x=Acquired_Year, y=Count, group = 1)) +
geom_point() + geom_line()+ scale_x_discrete(guide = guide_axis(n.dodge=3)) +
geom_text(aes(label=Count), position=position_dodge(width=0.9), vjust=-0.25) +
labs(title = "No. of Companies acquired/ipo over the years", x = "Acquired/IPO Year", y = "No. of Companies")
newdata <- one_hot(as.data.table(objects_filtered_final))
set.seed(2)
train.index <- createDataPartition(newdata$status, p = .7, list = FALSE)
train <- newdata[ train.index,]
test  <- newdata[-train.index,]
set.seed(2)
validation.index <- createDataPartition(test$status, p = .5, list = FALSE)
validation = test[validation.index, ]
final_test = test[-validation.index, ]
# write.csv(train, 'datasets/train.csv')
# write.csv(validation, 'datasets/validation.csv')
# write.csv(final_test, 'datasets/test.csv')
knitr::opts_chunk$set(echo = TRUE)
packages = c("functClust", "dplyr", "ggplot2", "ParamHelpers",
"mlr", "tidyverse", "mltools", "data.table", "caret",
"party", "rpart", "rpart.plot", "e1071", "caTools",
"class", "randomForest", "pROC", "plotROC")
## Now load or install & load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
knitr::opts_chunk$set(echo = TRUE)
packages = c("functClust", "dplyr", "ggplot2", "ParamHelpers",
"mlr", "tidyverse", "mltools", "data.table", "caret",
"party", "rpart", "rpart.plot", "e1071", "caTools",
"class", "randomForest", "pROC", "plotROC")
## Now load or install & load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
set.seed(2)
# read the data
train_data <- read.csv('datasets/train.csv')[,-1]
test_data <- read.csv('datasets/test.csv')[,-1]
validation_data <- read.csv('datasets/validation.csv')[,-1]
# kernel selection
kernels <- c('radial', 'linear', 'polynomial', 'sigmoid')
accuracy <- c()
for (k in kernels){
set.seed(2)
osvm_model <- svm(status~., train_data,
kernel = k, type = 'C-classification', degree = 3)
preds <- as.factor(predict(osvm_model, validation_data[,-50]))
accuracy <- append(accuracy, confusionMatrix(as.factor(validation_data$status),
preds)$overall[['Accuracy']])
}
plot(1:4, accuracy, type='l')
abline(v = (1:4)[which.max(accuracy)])
print(kernels[which.max(accuracy)])
kernel_ideal = kernels[which.max(accuracy)]
# gamma selection
gamma_ <-  seq(0.04,0.08,0.01)
accuracy <- c()
for (g in gamma_){
set.seed(2)
osvm_model <- svm(status~., train_data,
kernel = kernel_ideal, type = 'C-classification', gamma = g)
preds <- as.factor(predict(osvm_model, validation_data[,-50]))
accuracy <- append(accuracy, confusionMatrix(as.factor(validation_data$status),
preds)$overall[['Accuracy']])
}
plot(gamma_, accuracy, type='l')
abline(v = gamma_[which.max(accuracy)])
print(gamma_[which.max(accuracy)])
gamma_ideal = gamma_[which.max(accuracy)]
# cost selection
nu_ <-  seq(9,11,1)
accuracy <- c()
for (n in nu_){
set.seed(2)
osvm_model <- svm(status~., train_data,
kernel = kernel_ideal, type = 'C-classification',
gamma = gamma_ideal,
cost = n)
preds <- as.factor(predict(osvm_model, validation_data[,-50]))
accuracy <- append(accuracy, confusionMatrix(as.factor(validation_data$status),
preds)$overall[['Accuracy']])
}
plot(nu_, accuracy, type='l')
abline(v = nu_[which.max(accuracy)])
print(nu_[which.max(accuracy)])
nu_ideal = nu_[which.max(accuracy)]
# ideal values for hyper parameters
print(paste("Kernel Ideal Value: ", kernel_ideal))
print(paste("Gamma Ideal Value: ", gamma_ideal))
print(paste("Nu Ideal Value: ", nu_ideal))
# final model
set.seed(2)
osvm_model <- svm(status~., train_data,
kernel = kernel_ideal, type = 'C-classification', gamma = gamma_ideal,
cost = nu_ideal)
preds <- as.factor(predict(osvm_model, test_data[,-50]))
confusionMatrix(as.factor(test_data$status),preds)
knitr::opts_chunk$set(echo = TRUE)
glm.fit <- glm(status ~ .,
data = train_data,
family = binomial)
glm.probs <- predict(glm.fit,
newdata = validation[,-50],
type = "response")
glm.probs <- predict(glm.fit,
newdata = validation_data[,-50],
type = "response")
glm.pred <- ifelse(glm.probs > 0.5, "Up", "Down")
table(glm.pred, validation$status)
table(glm.pred, validation_data$status)
confusionMatrix(as.factor(glm.pred), as.factor(validation_data$status))
confusionMatrix(as.factor(glm.pred), (validation_data$status))
confusionMatrix((glm.pred), (validation_data$status))
confusionMatrix((glm.pred), as.factor(validation_data$status))
glm.pred
glm.pred <- ifelse(glm.probs > 0.5)
glm.pred
glm.fit <- glm(status ~ .,
data = train_data,
family = binomial)
glm.probs <- predict(glm.fit,
newdata = validation_data[,-50],
type = "response")
glm.pred <- ifelse(glm.probs > 0.5)
glm.pred <- ifelse(glm.probs > 0.5, "Acquired", "Closed")
glm.pred
table(glm.pred, validation_data$status)
glm.fit <- glm(status ~ .,
data = train_data,
family = binomial)
glm.probs <- predict(glm.fit,
newdata = validation_data[,-50],
type = "response")
glm.pred <- ifelse(glm.probs > 0.5)
glm.pred <- ifelse(glm.probs > 0.5, 1, 0)
confusionMatrix(as.factor(validation_data$status), glm.pred)
confusionMatrix(as.factor(validation_data$status), as.factor(glm.pred))
glm.fit <- glm(status ~ .,
data = train_data,
family = binomial)
glm.probs <- predict(glm.fit,
newdata = validation_data[,-50],
type = "response")
glm.pred <- ifelse(glm.probs > 0.4, 1, 0)
confusionMatrix(as.factor(validation_data$status), as.factor(glm.pred))
glm.fit <- glm(status ~ .,
data = train_data,
family = binomial)
glm.probs <- predict(glm.fit,
newdata = validation_data[,-50],
type = "response")
glm.pred <- ifelse(glm.probs > 0.6, 1, 0)
confusionMatrix(as.factor(validation_data$status), as.factor(glm.pred))
glm.fit <- glm(status ~ .,
data = train_data,
family = binomial)
glm.probs <- predict(glm.fit,
newdata = validation_data[,-50],
type = "response")
glm.pred <- ifelse(glm.probs > 0.5, 1, 0)
confusionMatrix(as.factor(validation_data$status), as.factor(glm.pred))
set.seed(2)
glm.fit <- glm(status ~ .,
data = train_data,
family = binomial)
glm.probs <- predict(glm.fit,
newdata = validation_data[,-50],
type = "response")
glm.pred <- ifelse(glm.probs > 0.5, 1, 0)
confusionMatrix(as.factor(validation_data$status), as.factor(glm.pred))
model_glm2 <- train(status ~., data=train_data, method='glm',
tuneGrid=expand.grid(parameter=c(0.001, 0.01, 0.1, 1,10,100, 1000)))
model_glm2 <- train(status ~., data=train_data, method='glm', tuneGrid=expand.grid(parameter=c(0.001, 0.01, 0.1, 1,10,100, 1000)))
model_glm2 <- train(status ~., data=train_data, method='glm', family=binomial
tuneGrid=expand.grid(parameter=c(0.001, 0.01, 0.1, 1,10,100, 1000)))
model_glm2 <- train(status ~., data=train_data, method='glm', family=binomial,
tuneGrid=expand.grid(parameter=c(0.001, 0.01, 0.1, 1,10,100, 1000)))
library(tidymodels)
library(glmnet)
install.packages('tidymodels')
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
knitr::opts_chunk$set(echo = TRUE)
library(tidymodels)
